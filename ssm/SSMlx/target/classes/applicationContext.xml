<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
    http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.1.xsd">
    <!--配置数据源-->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/student?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false"/>
        <property name="username" value="root"/>
        <property name="password" value="123456"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="mapperLocations">
            <list>
                <value>classpath:dao/**/*.xml</value>
            </list>
        </property>
    </bean>
    <!--手动编码配置Dao层-->
  <!--  <bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
    </bean>

    <bean id="UserDao" class="dao.UserDaoMapperImpl">
        <property name="sqlSessionTemplate" ref="sessionTemplate"/>
    </bean>
    <bean id="UserBiz" class="biz.impl.UserBizImpl">
        <property name="userDaoMapper" ref="UserDao"/>
    </bean>-->

    <!--<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="dao.UserMapper"/>
        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
    </bean>

    <bean id="UserBiz" class="biz.impl.UserBizImpl">
        <property name="userDaoMapper" ref="userMapper"/>
    </bean>-->
    <!-- MapperScannerConfigurer:自动装配 默认规则：首字母小写的-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="dao"/>
    </bean>
    <!--<bean id="UserBiz" class="biz.impl.UserBizImpl">
        <property name="userDaoMapper" ref="userMapper"/>
    </bean>-->
    <context:component-scan base-package="service,dao"/>


    <!--
        事务是什么？事务时保证业务操作完整性的一种机制
         1.原子性
         2.一致性
         3.隔离性
         4.持久性
    -->

    <!--
     JDBC中的事务
     Connection.setAutoCommit(false);
     Connection.commit()
     Connection.rollback()
    -->
    <!--通过spring中Aop，注入事务-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--用注解方式-->
    <tx:annotation-driven transaction-manager="txManager"/>
    <!--给事务管理器配置事物的属性-->
    <!--<tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            &lt;!&ndash;隔离属性&ndash;&gt;
            &lt;!&ndash;
                isolation：描述事务并发问题的特征
                并发：多少用户，同时访问操作相同的数据
                产生以下问题
                脏读：
                    读取到没有由提交的数据，最后造成数据的混乱
                    isolation="READ_COMMITTED"：只读取已提交的数据
                不可重复读：
                    一个事务中，读取多次相同的数据，但是结果不一样
                    1.不是脏读  2.同一个事务
                    REPEATABLE_READ：
                        本质：一本行锁（对数据库中的某一行数据加锁）
                    幻读：
                        一次事务中，多次对整表查询，单数结果不一样
                        SERIALIZABLE
                            本质：表锁（对数据库某张表加锁）
                    isolation：默认属性（根据数据库中的设置来设置）
                                安全效率

            &ndash;&gt;
            &lt;!&ndash;传播属性&ndash;&gt;
            &lt;!&ndash;
                解决事务嵌套的问题
                只一个大事务，嵌套了很多的小事务，它们彼此影响
                最终丧失了事务的原子性
                常用的属性 REQUIRED ： 增删改（常用的位置）
                          SUPPORTS ： 查询，效率更快
                          REQUIRES_NEW : 创建一个新事务  一般用于日志

            &ndash;&gt;
            &lt;!&ndash;只读属性&ndash;&gt;
            &lt;!&ndash;
                read-only一般只针对查询，加入制度，提高运行效率
            &ndash;&gt;
            &lt;!&ndash;超时属性&ndash;&gt;
            &lt;!&ndash;
                timeout：秒为单位
                指定事务的等待时间：当加上锁得时候，其他事务得等待时长（秒）
                默认时长：根据数据时长
            &ndash;&gt;
            &lt;!&ndash;异常属性&ndash;&gt;
            &lt;!&ndash;
                 follback-for：报什么错得时候回滚
                 默认值：RuntimeException及其子类
                 no-rollback-for：报什么错得时候提交
            &ndash;&gt;
            <tx:method name="get*" />
            <tx:method name="add*"/>
            <tx:method name="upd*"/>
            <tx:method name="del*"/>
            <tx:method name="sel*"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="bizMethod" expression="execution(* biz..*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="bizMethod"/>
    </aop:config>-->
</beans>