<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
    http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.1.xsd
    ">

    <!--配置数据源-->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url">
            <value><![CDATA[jdbc:mysql://localhost:3306/product2?useUnicode=true&amp;characterEncoding=utf-8]]></value>
        </property>
        <property name="username" value="root"/>
        <property name="password" value="123456"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="mapperLocations">
            <list>
                <value>classpath:com/yuntu/dao/*.xml</value>
            </list>
        </property>
    </bean>
                <!--手动编码配置Dao层-->
    <!--<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
    </bean>

    <bean id="StudentDao" class="com.yuntu.dao.StudentDaoMapperImpl">
        <property name="sqlSessionTemplate" ref="sqlSessionTemplate"/>
    </bean>

    <bean id="StudentBiz" class="com.yuntu.biz.StudentBizImpl">
        <property name="studentMapper" ref="StudentDao"/>
    </bean>-->

    <!--<bean id="StudentMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="com.yuntu.dao.StudentMapper"/>
        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
    </bean>-->

    <!--<bean id="StudentBiz" class="com.yuntu.biz.StudentBizImpl">
        <property name="studentMapper" ref="StudentMapper"/>
    </bean>-->
    <!--MapperScannerConfigurer:自动装配  默认规则：首字母小写-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.yuntu.dao"/>
     </bean>
    <context:component-scan base-package="com.yuntu.service,com.yuntu.dao"/>


    <!--事务是什么？事务时保证业务操作完整性的一种机制-->
    <!--A.原子性
        C.一致性
        I.隔离性
        D.持久性
    -->
    <!--
        JDBC中的事务
        Connection.setAutoCommit(false)
        Connection.commit()
        Connection.rollback()
    -->
    <!--
        commit();
        rollback();
    -->
    <!--通过Spring中的AOP,注入事务(声明式事务)-->
    <!--事务管理器-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--注解方式-->
    <tx:annotation-driven transaction-manager="txManager"/>
    <!--给事务管理器配置事务属性-->
    <!--<tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            &lt;!&ndash;隔离属性
                isolation:描述事务并发的问题特征
                并发：多个用户，同时访问操作相同的数据
                产生以下问题
                    脏读
                        读取到没有提交的数据，最后造成数据混乱
                        READ_COMMITTED：只读取已提交的数据
                    不可重复读
                        一个事务中，读取多次相同的数据，但是结果不一样
                        1.不是脏读 2.同一个事务里
                        REPEATABLE_READ：本质：一把行锁(对数据库中的某一行数据加锁)
                    幻读
                        一次事务中，多次对整表查询，但是结果不一样
                        SERIALIZABLE:本质：表锁(对数据库某张表加锁)
                isolation:默认属性(根据数据库中的设置来设置)
            &ndash;&gt;
            &lt;!&ndash;传播属性
                事务嵌套问题
                指一个大事务嵌套了很多小事务，他们彼此影响最终丧失事务的原子性
                常用属性
                    REQUIRED：增 删 改
                    SUPPORTS：查，效率更快
                    REQUIRES_NEW：一定开一个新事务  一般用于日志
            &ndash;&gt;
            &lt;!&ndash;只读属性
                read-only：一般只针对查询，加入只读提高运行效率
            &ndash;&gt;
            &lt;!&ndash;超时属性
                timeout：秒为单位
                指定事务的等待时间：当加上锁的时候其他事务的等待时长
                默认时长：根据数据库时长
            &ndash;&gt;
            &lt;!&ndash;异常属性
                rollback-for:报什么错时回滚
                默认值为RuntimeException及其子类
                no-rollback-for:报什么错时提交
            &ndash;&gt;
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="add*"/>
            <tx:method name="del*"/>
            <tx:method name="upd*"/>
            <tx:method name="sel*"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="bizMethod" expression="execution(* com.yuntu..biz..*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="bizMethod"/>
    </aop:config>-->
</beans>